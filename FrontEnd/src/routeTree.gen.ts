/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as authenticatedRouteImport } from './routes/(authenticated)/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as authenticatedIndexImport } from './routes/(authenticated)/index'
import { Route as authenticatedSettingsImport } from './routes/(authenticated)/settings'
import { Route as authenticatedDevicesImport } from './routes/(authenticated)/devices'
import { Route as authenticatedAnalyticsImport } from './routes/(authenticated)/analytics'
import { Route as authenticatedAlertsImport } from './routes/(authenticated)/alerts'
import { Route as authenticatedAddDeviceImport } from './routes/(authenticated)/add-device'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'

// Create/Update Routes

const authenticatedRouteRoute = authenticatedRouteImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedIndexRoute = authenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authenticatedSettingsRoute = authenticatedSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authenticatedDevicesRoute = authenticatedDevicesImport.update({
  id: '/devices',
  path: '/devices',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authenticatedAnalyticsRoute = authenticatedAnalyticsImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authenticatedAlertsRoute = authenticatedAlertsImport.update({
  id: '/alerts',
  path: '/alerts',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authenticatedAddDeviceRoute = authenticatedAddDeviceImport.update({
  id: '/add-device',
  path: '/add-device',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authRouteRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)': {
      id: '/(authenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof authRouteImport
    }
    '/(authenticated)/add-device': {
      id: '/(authenticated)/add-device'
      path: '/add-device'
      fullPath: '/add-device'
      preLoaderRoute: typeof authenticatedAddDeviceImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/(authenticated)/alerts': {
      id: '/(authenticated)/alerts'
      path: '/alerts'
      fullPath: '/alerts'
      preLoaderRoute: typeof authenticatedAlertsImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/(authenticated)/analytics': {
      id: '/(authenticated)/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof authenticatedAnalyticsImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/(authenticated)/devices': {
      id: '/(authenticated)/devices'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof authenticatedDevicesImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/(authenticated)/settings': {
      id: '/(authenticated)/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof authenticatedSettingsImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/(authenticated)/': {
      id: '/(authenticated)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedIndexImport
      parentRoute: typeof authenticatedRouteImport
    }
  }
}

// Create and export the route tree

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface authenticatedRouteRouteChildren {
  authenticatedAddDeviceRoute: typeof authenticatedAddDeviceRoute
  authenticatedAlertsRoute: typeof authenticatedAlertsRoute
  authenticatedAnalyticsRoute: typeof authenticatedAnalyticsRoute
  authenticatedDevicesRoute: typeof authenticatedDevicesRoute
  authenticatedSettingsRoute: typeof authenticatedSettingsRoute
  authenticatedIndexRoute: typeof authenticatedIndexRoute
}

const authenticatedRouteRouteChildren: authenticatedRouteRouteChildren = {
  authenticatedAddDeviceRoute: authenticatedAddDeviceRoute,
  authenticatedAlertsRoute: authenticatedAlertsRoute,
  authenticatedAnalyticsRoute: authenticatedAnalyticsRoute,
  authenticatedDevicesRoute: authenticatedDevicesRoute,
  authenticatedSettingsRoute: authenticatedSettingsRoute,
  authenticatedIndexRoute: authenticatedIndexRoute,
}

const authenticatedRouteRouteWithChildren =
  authenticatedRouteRoute._addFileChildren(authenticatedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof authenticatedIndexRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/add-device': typeof authenticatedAddDeviceRoute
  '/alerts': typeof authenticatedAlertsRoute
  '/analytics': typeof authenticatedAnalyticsRoute
  '/devices': typeof authenticatedDevicesRoute
  '/settings': typeof authenticatedSettingsRoute
}

export interface FileRoutesByTo {
  '/': typeof authenticatedIndexRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/add-device': typeof authenticatedAddDeviceRoute
  '/alerts': typeof authenticatedAlertsRoute
  '/analytics': typeof authenticatedAnalyticsRoute
  '/devices': typeof authenticatedDevicesRoute
  '/settings': typeof authenticatedSettingsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(authenticated)': typeof authenticatedRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(authenticated)/add-device': typeof authenticatedAddDeviceRoute
  '/(authenticated)/alerts': typeof authenticatedAlertsRoute
  '/(authenticated)/analytics': typeof authenticatedAnalyticsRoute
  '/(authenticated)/devices': typeof authenticatedDevicesRoute
  '/(authenticated)/settings': typeof authenticatedSettingsRoute
  '/(authenticated)/': typeof authenticatedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/add-device'
    | '/alerts'
    | '/analytics'
    | '/devices'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/add-device'
    | '/alerts'
    | '/analytics'
    | '/devices'
    | '/settings'
  id:
    | '__root__'
    | '/(auth)'
    | '/(authenticated)'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(authenticated)/add-device'
    | '/(authenticated)/alerts'
    | '/(authenticated)/analytics'
    | '/(authenticated)/devices'
    | '/(authenticated)/settings'
    | '/(authenticated)/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  authenticatedRouteRoute: typeof authenticatedRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  authenticatedRouteRoute: authenticatedRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)",
        "/(authenticated)"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/login",
        "/(auth)/register"
      ]
    },
    "/(authenticated)": {
      "filePath": "(authenticated)/route.tsx",
      "children": [
        "/(authenticated)/add-device",
        "/(authenticated)/alerts",
        "/(authenticated)/analytics",
        "/(authenticated)/devices",
        "/(authenticated)/settings",
        "/(authenticated)/"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx",
      "parent": "/(auth)"
    },
    "/(authenticated)/add-device": {
      "filePath": "(authenticated)/add-device.tsx",
      "parent": "/(authenticated)"
    },
    "/(authenticated)/alerts": {
      "filePath": "(authenticated)/alerts.tsx",
      "parent": "/(authenticated)"
    },
    "/(authenticated)/analytics": {
      "filePath": "(authenticated)/analytics.tsx",
      "parent": "/(authenticated)"
    },
    "/(authenticated)/devices": {
      "filePath": "(authenticated)/devices.tsx",
      "parent": "/(authenticated)"
    },
    "/(authenticated)/settings": {
      "filePath": "(authenticated)/settings.tsx",
      "parent": "/(authenticated)"
    },
    "/(authenticated)/": {
      "filePath": "(authenticated)/index.tsx",
      "parent": "/(authenticated)"
    }
  }
}
ROUTE_MANIFEST_END */
